#!/bin/sh

# Activation script for '@@ENV_NAME@@' environment generated by zenv

# Define a function to handle errors
handle_module_error() {
  echo "Error: Failed to load module '$1'" >&2
  echo "Info: Environment activation may be incomplete" >&2
  return 1
}

# Check if module command exists
if command -v module >/dev/null 2>&1; then
  echo 'Info: Purging all modules'
  module --force purge || echo "Warning: Failed to purge modules, continuing anyway" >&2

  @@MODULE_LOADING_BLOCK@@
else
  echo 'Info: Module command not found, skipping module operations'
fi

# Activate the Python virtual environment
source @@VENV_PATH@@/bin/activate

# Prevent Python from writing .pyc files to save inodes
export PYTHONDONTWRITEBYTECODE=1

@@CUSTOM_VAR_EXPORTS@@

@@ACTIVATE_COMMANDS_BLOCK@@

echo "Info: Environment '@@ENV_NAME@@' activated"
echo "Info: Description@@ENV_DESCRIPTION@@"

# Add deactivate_all function to completely deactivate
deactivate_all() {
  # Check if deactivate function exists (from venv)
  if command -v deactivate >/dev/null 2>&1; then
    echo "Info: Running venv deactivate"
    deactivate
  fi

  # Purge modules if module command exists
  if command -v module >/dev/null 2>&1; then
    echo "Info: Purging loaded modules..."
    module --force purge || echo "Warning: Failed to purge modules" >&2
  fi

  # Then unset any custom environment variables
  @@CUSTOM_VAR_UNSET@@

  # Unset PYTHONDONTWRITEBYTECODE
  if [ -n "$PYTHONDONTWRITEBYTECODE" ]; then
    unset PYTHONDONTWRITEBYTECODE
  fi

  # Unset this function
  unset -f deactivate_all
  echo "Info: Environment fully deactivated"
}
