#!/bin/sh

# Activation script for '@@ENV_NAME@@' environment generated by zenv

# Define a function to handle errors
handle_module_error() {
  echo "Warning: Failed to load module '$1'" >&2
  echo "This may be due to a typo, encoding issue, or the module not being available." >&2
  echo "Info: Environment activation will continue, but functionality may be limited" >&2
  return 1
}

# Define function to safely load a module and handle errors
safe_module_load() {
  local module_name="$1"
  # Check for problematic characters in module name
  if echo "$module_name" | grep -q '[^[:print:]]'; then
    echo "Warning: Module name '$module_name' contains non-printable characters. Skipping." >&2
    return 1
  fi

  # Try to load the module
  module load "$module_name" 2>/tmp/zenv_module_act_err || {
    local err_output=$(cat /tmp/zenv_module_act_err)
    echo "Warning: Failed to load module '$module_name': $err_output" >&2
    return 1
  }

  # echo "Info: Successfully loaded module: $module_name"
  return 0
}

# Check if module command exists
if command -v module >/dev/null 2>&1; then
  # echo 'Info: Purging all modules'
  module --force purge || echo "Warning: Failed to purge modules, continuing anyway" >&2

  # Set up error handling for module loading
  set +e  # Don't exit on module load errors

  @@MODULE_LOADING_BLOCK@@

  # Reset error handling
  set -e

  # List loaded modules for verification
  # echo "Info: Currently loaded modules:"
  # module list 2>&1 | sed 's/^/  /' || echo "  Failed to list modules"
else
  echo 'Info: Skipping module operations'
fi

# Activate the Python virtual environment
source @@VENV_PATH@@/bin/activate

# Prevent Python from writing .pyc files to save inodes
export PYTHONDONTWRITEBYTECODE=1
@@ZENV_ENV_DIR@@

@@ACTIVATE_COMMANDS_BLOCK@@

@@ACTIVATE_HOOK_BLOCK@@

# Add deactivate_all function to completely deactivate
deactivate_all() {
  if command -v deactivate >/dev/null 2>&1; then
    echo "Info: Running venv deactivate"
    deactivate
  fi

  # Purge modules if module command exists
  if command -v module >/dev/null 2>&1; then
    echo "Info: Purging loaded modules..."
    module purge || echo "Warning: Failed to purge modules" >&2
  fi

  # Unset PYTHONDONTWRITEBYTECODE
  if [ -n "$PYTHONDONTWRITEBYTECODE" ]; then
    unset PYTHONDONTWRITEBYTECODE
  fi

  # Unset this function
  unset -f deactivate_all
  echo "Info: Environment fully deactivated"
}
