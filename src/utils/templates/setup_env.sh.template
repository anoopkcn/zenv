#!/bin/sh
set -e # Exit on error for setup scripts

# Setup script for '@@ENV_NAME@@' environment generated by zenv

# Print message in blue
ohai() {
  printf '\033[0;34minfo:\033[0;39m %s\033[0m\n' "$@"
}

# Print message in green
success() {
  printf '\033[1;32minfo:\033[1;39m %s\033[0m\n' "$@"
}

# Print message in yellow
info() {
  printf '\033[1;33minfo:\033[0m %s\n' "$@"
}

# Print warning message in red
warn() {
  printf '\033[1;31mWarning:\033[0m: %s\n' "$@" >&2
}

# Print error message and exit
abort() {
  printf '\033[1;31mError:\033[0m: %s\n' "$@" >&2
  exit 1
}

# Define a function to handle module errors
handle_module_error() {
  abort "Failed to load module '$1'"
}

# Handle upgrade_env flag
@@UPGRADE_ENV_VALUE@@ # Sets UPGRADE_ENV shell variable
if [ "$UPGRADE_ENV" = "true" ]; then
  ohai "Upgrade flag (--upgrade) detected."
  info "Will attempt to upgrade existing Python in venv, or create new if missing/corrupted."
else
  ohai "Normal setup mode (create if missing/corrupted, use existing if valid)."
fi

# Handle use_default_python flag
@@USE_DEFAULT_PYTHON_VALUE@@
if [ "$USE_DEFAULT_PYTHON" = "true" ]; then
  ohai "Python flag (--python) detected"
  info "Will use only the default Python from ZENV_DIR/default-python"
fi

# Handle development mode flag
@@DEV_MODE_VALUE@@
if [ "$DEV_MODE" = "true" ]; then
  ohai "Development mode flag (--dev) detected"
  info "Will install current directory as an editable package"
fi

# Handle modules_verified flag
@@MODULES_VERIFIED_VALUE@@

# Check if module command exists
if command -v module >/dev/null 2>&1; then
  ohai "Purging all modules"
  module --force purge

  # Load modules based on verification status
  if [ "$MODULES_VERIFIED" = "true" ]; then
    # ohai "Modules were pre-verified, proceeding with loading"
    # We still need to load the modules to access the Python they provide
    # But if any fails, we'll continue since we verified they should work
    @@MODULE_LOADING_BLOCK@@
  else
    # Load all required modules with full error checking
    @@MODULE_LOADING_BLOCK@@
  fi

  # After loading modules, check which Python is now available in the PATH
  MODULE_PYTHON=""
  if command -v python3 >/dev/null 2>&1; then
    MODULE_PYTHON=$(which python3)
    ohai "Found Python in PATH after loading modules: $MODULE_PYTHON"
    info "Version: $($MODULE_PYTHON --version 2>&1)"
  elif command -v python >/dev/null 2>&1; then
    MODULE_PYTHON=$(which python)
    ohai "Found Python in PATH after loading modules: $MODULE_PYTHON"
    info "Version: $($MODULE_PYTHON --version 2>&1)"
  else
    warn "No Python found in PATH after loading modules."
    if [ -n "@@FALLBACK_PYTHON@@" ] && [ "@@FALLBACK_PYTHON@@" != "python3" ]; then
      info "Will try fallback Python: @@FALLBACK_PYTHON@@"
    else
      info "Will try system Python executables"
    fi
  fi

  ohai "Checking Python packages provided by modules"
  MODULE_PACKAGES_FILE=$(mktemp)
  # Use module Python if available, otherwise try system Python
  # Extract and preprocess package names for faster filtering
  if [ -n "$MODULE_PYTHON" ]; then
    $MODULE_PYTHON -m pip list --format=freeze | awk -F'==' '{print $1}' | sort > "$MODULE_PACKAGES_FILE" 2>/dev/null || true
  else
    (python3 -m pip list --format=freeze | awk -F'==' '{print $1}' | sort > "$MODULE_PACKAGES_FILE" 2>/dev/null || python -m pip list --format=freeze | awk -F'==' '{print $1}' | sort > "$MODULE_PACKAGES_FILE" 2>/dev/null) || true
  fi

  if [ -s "$MODULE_PACKAGES_FILE" ]; then
    ohai "Found packages from modules:"
    echo -n '    '
    # Extract just package names, sort, join with comma-space
    cat "$MODULE_PACKAGES_FILE" | sed -E 's/==.*//;s/ .*//' | sort | tr '\n' ',' | sed 's/,/, /g' | sed 's/, $//'
    echo ''
  else
    ohai "No Python packages detected from modules"
    # Ensure the file exists even if empty for later steps
    touch "$MODULE_PACKAGES_FILE"
  fi
else
  ohai "Module command not found, skipping module operations"
  MODULE_PACKAGES_FILE=$(mktemp) # Create empty temp file
  MODULE_PYTHON="" # Ensure this is empty when no modules are loaded
fi

ohai "Step 3: Creating Python virtual environment"

# Determine selected Python executable for venv creation/upgrade
# This logic should consolidate MODULE_PYTHON, FALLBACK_PYTHON, system pythons
SELECTED_PYTHON_EXE=""
PYTHON_DESCRIPTION=""

# Priority:
# 1. --python flag (forces FALLBACK_PYTHON if it's from zenv default, errors if not found)
# 2. Module Python
# 3. Fallback Python (from zenv.json or zenv default)
# 4. System python3
# 5. System python

if [ "$USE_DEFAULT_PYTHON" = "true" ]; then
  if [ -n "@@FALLBACK_PYTHON@@" ] && [ "@@FALLBACK_PYTHON@@" != "python3" ] && command -v "@@FALLBACK_PYTHON@@" >/dev/null 2>&1; then
    SELECTED_PYTHON_EXE="@@FALLBACK_PYTHON@@"
    PYTHON_DESCRIPTION="default configured Python (from --python flag)"
  else
    abort "Default Python (@@FALLBACK_PYTHON@@) not found or invalid, but --python flag was specified."
  fi
elif [ -n "$MODULE_PYTHON" ] && command -v "$MODULE_PYTHON" >/dev/null 2>&1; then
  SELECTED_PYTHON_EXE="$MODULE_PYTHON"
  PYTHON_DESCRIPTION="module-provided Python"
elif [ -n "@@FALLBACK_PYTHON@@" ] && [ "@@FALLBACK_PYTHON@@" != "python3" ] && command -v "@@FALLBACK_PYTHON@@" >/dev/null 2>&1; then
  SELECTED_PYTHON_EXE="@@FALLBACK_PYTHON@@"
  PYTHON_DESCRIPTION="fallback Python"
elif command -v "python3" >/dev/null 2>&1; then
  SELECTED_PYTHON_EXE="python3"
  PYTHON_DESCRIPTION="system python3"
elif command -v "python" >/dev/null 2>&1; then
  SELECTED_PYTHON_EXE="python"
  PYTHON_DESCRIPTION="system python"
else
  abort "Failed to find a suitable Python executable. Please ensure Python is installed and in PATH."
fi

ohai "Selected Python for venv: $PYTHON_DESCRIPTION ($SELECTED_PYTHON_EXE)"
info "Version: $($SELECTED_PYTHON_EXE --version 2>&1)"

if ! "$SELECTED_PYTHON_EXE" -c "import venv" 2>/dev/null; then
    abort "$PYTHON_DESCRIPTION ($SELECTED_PYTHON_EXE) does not support the venv module."
fi

VENV_DIR="@@VENV_DIR@@"
VENV_EXISTS=false
VENV_IS_VALID=false

if [ -d "@@VENV_DIR@@" ]; then
  VENV_EXISTS=true
  if [ -f "$VENV_DIR/bin/activate" ] && [ -f "$VENV_DIR/bin/python" ]; then
    VENV_IS_VALID=true
  fi
fi

VENV_ACTION_TAKEN=false

if [ "$UPGRADE_ENV" = "true" ]; then
  if [ "$VENV_EXISTS" = "true" ]; then
    if [ "$VENV_IS_VALID" = "true" ]; then
      ohai "--upgrade: Attempting to upgrade existing venv $VENV_DIR with $PYTHON_DESCRIPTION"
      if "$SELECTED_PYTHON_EXE" -m venv --upgrade "$VENV_DIR"; then
        success "Successfully upgraded virtual environment."
        VENV_ACTION_TAKEN=true
      else
        warn "Failed to upgrade virtual environment with $SELECTED_PYTHON_EXE."
        warn "Proceeding with the existing environment, but it may not use the intended Python version."
        # The environment is still considered "valid" for pip installs, just not upgraded.
      fi
    else # Venv exists but is invalid/corrupted
      ohai "--upgrade: Existing venv $VENV_DIR seems corrupted. Clearing and creating new."
      rm -rf "$VENV_DIR"/*  # Clear contents
      if "$SELECTED_PYTHON_EXE" -m venv "$VENV_DIR"; then
        success "Successfully created new virtual environment in $VENV_DIR."
        VENV_ACTION_TAKEN=true
      else
        abort "Failed to create virtual environment in $VENV_DIR after clearing due to corruption."
      fi
    fi
  else # Venv does not exist
    ohai "--upgrade: Venv $VENV_DIR does not exist. Creating new."
    if "$SELECTED_PYTHON_EXE" -m venv "$VENV_DIR"; then
      success "Successfully created new virtual environment in $VENV_DIR."
      VENV_ACTION_TAKEN=true
    else
      abort "Failed to create virtual environment in $VENV_DIR."
    fi
  fi
fi

# If --upgrade was not passed, or if it was passed but no action was taken
# (e.g. upgrade failed on a valid venv, and we decided to proceed with existing)
if [ "$VENV_ACTION_TAKEN" = "false" ]; then
  if [ "$VENV_EXISTS" = "true" ]; then
    if [ "$VENV_IS_VALID" = "true" ]; then
      ohai "Using existing valid virtual environment $VENV_DIR."
    else # Venv exists but is invalid/corrupted
      ohai "Existing venv $VENV_DIR seems corrupted. Clearing and creating new."
      rm -rf "$VENV_DIR"/*
      if "$SELECTED_PYTHON_EXE" -m venv "$VENV_DIR"; then
        success "Successfully created new virtual environment in $VENV_DIR."
      else
        abort "Failed to create virtual environment in $VENV_DIR after clearing due to corruption."
      fi
    fi
  else # Venv does not exist
    ohai "Creating new virtual environment $VENV_DIR."
    if "$SELECTED_PYTHON_EXE" -m venv "$VENV_DIR"; then
      success "Successfully created new virtual environment in $VENV_DIR."
    else
      abort "Failed to create virtual environment in $VENV_DIR."
    fi
  fi
fi

ohai "Step 4: Activating environment and installing dependencies"
# Verify the virtual environment exists and is valid
if [ ! -d "@@VENV_DIR@@" ] || [ ! -f "@@VENV_DIR@@/bin/activate" ]; then
  abort "Virtual environment not found or invalid at @@VENV_DIR@@
$(if [ -d "@@VENV_DIR@@" ] && [ ! -d "@@VENV_DIR@@/bin" ]; then
  echo "bin directory does not exist in @@VENV_DIR@@"
elif [ -d "@@VENV_DIR@@/bin" ]; then
  echo "bin directory contents:"
  ls -la "@@VENV_DIR@@/bin"
fi)
This could indicate that the virtual environment was not created properly."
fi

# Activate the environment
source "@@VENV_DIR@@/bin/activate"

# Ensure pip is available and upgrade it
if ! python -m pip --version >/dev/null 2>&1; then
  abort "'pip' module not found after activating venv. Ensure Python installation includes pip."
fi

# Ensure build essentials are there, especially if venv was just created/upgraded
ohai "Ensuring pip, setuptools, and wheel are up-to-date in the venv"
python -m pip install --ignore-installed --no-build-isolation --upgrade pip setuptools wheel

# Handle dependencies installation based on force_deps flag
@@FORCE_DEPS_VALUE@@

# Resolve requirements file path
REQUIREMENTS_PATH="@@REQUIREMENTS_PATH@@"
if [ ! -f "$REQUIREMENTS_PATH" ] || [ ! -s "$REQUIREMENTS_PATH" ]; then
  # Primary requirements file doesn't exist or is empty
  ALT_REQUIREMENTS="$(dirname "@@VENV_DIR@@")/requirements.txt"
  if [ -f "$ALT_REQUIREMENTS" ] && [ -s "$ALT_REQUIREMENTS" ]; then
    ohai "Using alternative requirements file: $ALT_REQUIREMENTS"
    REQUIREMENTS_PATH="$ALT_REQUIREMENTS"
  else
    # Create empty requirements file if none exists
    info "No valid requirements file found. Creating empty one."
    touch "@@REQUIREMENTS_PATH@@"
    REQUIREMENTS_PATH="@@REQUIREMENTS_PATH@@"
  fi
fi

# Install dependencies
PIP_INSTALL_OPTIONS="--ignore-installed" # Base option

if [ "$FORCE_DEPS" = "true" ]; then
  # Install all dependencies regardless of module packages
  ohai "Using --force-deps: Installing all specified dependencies"
else
  # Filter dependencies based on what's provided by modules
  if [ -s "$MODULE_PACKAGES_FILE" ]; then
    ohai "Filtering requirements against module-provided packages"
    FILTERED_REQUIREMENTS=$(mktemp)
    EXCLUDED_COUNT=0
    INSTALLED_COUNT=0

    # Process each line in the requirements file - more efficient single pass
    if [ -s "$REQUIREMENTS_PATH" ]; then
      # Use grep to filter out comments and empty lines first
      grep -v "^[[:space:]]*#" "$REQUIREMENTS_PATH" | grep -v "^[[:space:]]*$" | while read -r line; do
        # Extract package name without version specs
        package_name=$(echo "$line" | sed 's/[^a-zA-Z0-9_.-].*//' | tr '[:upper:]' '[:lower:]')

        # Check if package exists in module packages (now just the name)
        if grep -i -q "^${package_name}$" "$MODULE_PACKAGES_FILE"; then
          info "Excluding '$line' (provided by loaded modules)"
          EXCLUDED_COUNT=$((EXCLUDED_COUNT + 1))
        else
          # Package not provided by modules, add to filtered list
          echo "$line" >> "$FILTERED_REQUIREMENTS"
          INSTALLED_COUNT=$((INSTALLED_COUNT + 1))
        fi
      done
    else
      info "Requirements file is empty or not readable"
    fi

    # Install the filtered dependencies
    ohai "Installing $INSTALLED_COUNT package(s) from filtered requirements ($EXCLUDED_COUNT excluded)"
    if [ -s "$FILTERED_REQUIREMENTS" ]; then
      python -m pip install $PIP_INSTALL_OPTIONS -r "$FILTERED_REQUIREMENTS"
    else
      info "No additional packages need to be installed"
    fi
    # Clean up temp file
    rm -f "$FILTERED_REQUIREMENTS"
  else
    # No module packages detected, install all requirements
    ohai "Installing all dependencies from requirements file (no module packages to filter against)"
    if [ -s "$REQUIREMENTS_PATH" ]; then
      python -m pip install $PIP_INSTALL_OPTIONS -r "$REQUIREMENTS_PATH"
    else
      info "No dependencies to install (empty requirements file)"
    fi
  fi
fi

# If FORCE_DEPS was true, we still need to install from the main REQUIREMENTS_PATH
if [ "$FORCE_DEPS" = "true" ]; then
  if [ -s "$REQUIREMENTS_PATH" ]; then
    python -m pip install $PIP_INSTALL_OPTIONS -r "$REQUIREMENTS_PATH"
  else
    info "No dependencies to install from $REQUIREMENTS_PATH (empty or not found)"
  fi
fi


# Clean up any temporary files
rm -f "$MODULE_PACKAGES_FILE" 2>/dev/null || true

# Handle development mode install if enabled
if [ "$DEV_MODE" = "true" ]; then
  ohai "Step 4.5: Installing current directory as an editable package"

  if [ -f "setup.py" ] || [ -f "pyproject.toml" ]; then
    info "Found Python package configuration in current directory"
    python -m pip install $PIP_INSTALL_OPTIONS --no-build-isolation --editable . || {
      warn "Failed to install current directory as editable package"
      warn "Check that your setup.py or pyproject.toml is valid"
    }
    success "Installed current directory as editable package"
  else
    warn "No setup.py or pyproject.toml found in current directory"
    warn "Skipping editable install. Create one of these files if needed."
  fi
fi

# Run custom setup commands if provided
@@CUSTOM_SETUP_COMMANDS_BLOCK@@

success "Setup completed successfully for Environment '@@ENV_NAME@@'"
success "To activate, run: source $(realpath @@ACTIVATE_SCRIPT_PATH@@)"
success "Or from anywhere: source \$(zenv activate @@ENV_NAME@@)"
