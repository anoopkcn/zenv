#!/bin/sh
set -e # Exit on error for setup scripts

# Setup script for '@@ENV_NAME@@' environment generated by zenv

# Define a function to handle module errors
handle_module_error() {
  echo "Error: Failed to load module '$1'" >&2
  exit 1
}

# Check if module command exists
if command -v module >/dev/null 2>&1; then
  echo '==> Purging all modules'
  module --force purge
  
  @@MODULE_LOADING_BLOCK@@
  
  echo '==> Checking Python packages provided by modules'
  MODULE_PACKAGES_FILE=$(mktemp)
  # Try python3 first, then python if python3 fails
  (python3 -m pip list --format=freeze > "$MODULE_PACKAGES_FILE" 2>/dev/null || python -m pip list --format=freeze > "$MODULE_PACKAGES_FILE" 2>/dev/null) || true
  if [ -s "$MODULE_PACKAGES_FILE" ]; then
    echo '==> Found packages from modules:'
    echo -n '    '
    # Extract just package names, sort, join with comma-space
    cat "$MODULE_PACKAGES_FILE" | sed -E 's/==.*//;s/ .*//' | sort | tr '\n' ',' | sed 's/,/, /g' | sed 's/, $//'
    echo ''
  else
    echo '==> No Python packages detected from modules'
    # Ensure the file exists even if empty for later steps
    touch "$MODULE_PACKAGES_FILE"
  fi
else
  echo '==> Module command not found, skipping module operations'
  MODULE_PACKAGES_FILE=$(mktemp) # Create empty temp file
fi

echo '==> Step 3: Creating Python virtual environment'
# Try configured python executable first, then python3, then python
VENV_CREATED=false
if command -v @@PYTHON_EXECUTABLE@@ >/dev/null 2>&1; then
  echo "Using configured Python: @@PYTHON_EXECUTABLE@@"
  @@PYTHON_EXECUTABLE@@ -m venv @@VENV_DIR@@ && VENV_CREATED=true
fi
if [ "$VENV_CREATED" = false ] && command -v python3 >/dev/null 2>&1; then
  echo "Falling back to 'python3' executable"
  python3 -m venv @@VENV_DIR@@ && VENV_CREATED=true
fi
if [ "$VENV_CREATED" = false ] && command -v python >/dev/null 2>&1; then
  echo "Falling back to 'python' executable"
  python -m venv @@VENV_DIR@@ && VENV_CREATED=true
fi
if [ "$VENV_CREATED" = false ]; then
  echo "ERROR: Failed to find a suitable Python executable (@@PYTHON_EXECUTABLE@@, 'python3', or 'python') to create venv."
  exit 1
fi

echo '==> Step 4: Activating environment and installing dependencies'
source @@VENV_DIR@@/bin/activate
# Ensure pip is available and upgrade it
if ! python -m pip --version >/dev/null 2>&1; then
  echo "ERROR: 'pip' module not found after activating venv. Ensure Python installation includes pip."
  exit 1
fi
python -m pip install --upgrade pip

# Handle dependencies installation based on force_deps flag
@@FORCE_DEPS_VALUE@@
if [ "$FORCE_DEPS" = "true" ]; then
  # Install all dependencies regardless of module packages
  echo '==> Using --force-deps: Installing all specified dependencies'
  @@PIP_INSTALL_COMMAND@@
  rm -f "$MODULE_PACKAGES_FILE" 2>/dev/null || true
else
  # Filter dependencies based on what's provided by modules
  if [ -n "$MODULE_PACKAGES_FILE" ] && [ -s "$MODULE_PACKAGES_FILE" ]; then
    echo '==> Filtering requirements against module-provided packages'
    FILTERED_REQUIREMENTS=$(mktemp)
    EXCLUDED_COUNT=0
    INSTALLED_COUNT=0
    
    # Process each line in the requirements file
    while IFS= read -r line || [ -n "$line" ]; do
      # Skip comments and empty lines
      trimmed_line=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
      if [ -z "$trimmed_line" ] || [[ "$trimmed_line" == "#"* ]]; then
        continue
      fi
      
      # Extract package name without version specs
      package_name=$(echo "$trimmed_line" | sed 's/[^a-zA-Z0-9_.-].*//' | tr '[:upper:]' '[:lower:]')
      
      # Check if package exists in module packages
      if grep -i -q "^${package_name}==" "$MODULE_PACKAGES_FILE" || grep -i -q "^${package_name} " "$MODULE_PACKAGES_FILE"; then
        echo "==> Excluding '$trimmed_line' (provided by loaded modules)"
        EXCLUDED_COUNT=$((EXCLUDED_COUNT + 1))
      else
        # Package not provided by modules, add to filtered list
        echo "$line" >> "$FILTERED_REQUIREMENTS"
        INSTALLED_COUNT=$((INSTALLED_COUNT + 1))
      fi
    done < @@REQUIREMENTS_PATH@@
    
    # Install the filtered dependencies
    echo "==> Installing $INSTALLED_COUNT package(s) from filtered requirements ($EXCLUDED_COUNT excluded)"
    if [ -s "$FILTERED_REQUIREMENTS" ]; then
      python -m pip install -r "$FILTERED_REQUIREMENTS"
    else
      echo '==> No additional packages need to be installed'
    fi
    
    # Clean up temp files
    rm -f "$FILTERED_REQUIREMENTS" "$MODULE_PACKAGES_FILE"
  else
    # No module packages detected, install all requirements
    echo '==> Installing all dependencies from requirements file'
    @@PIP_INSTALL_COMMAND@@
    rm -f "$MODULE_PACKAGES_FILE" 2>/dev/null || true
  fi
fi

# Run custom setup commands if provided
@@CUSTOM_SETUP_COMMANDS_BLOCK@@

echo '==> Setup completed successfully!'
echo 'To activate this environment, run: source @@ACTIVATE_SCRIPT_PATH@@'